package com.baxolino.apps.floats.core.transfer

import android.util.Log
import com.baxolino.apps.floats.core.encryption.AsymmetricEncryption.KEY_SIZE_BITS
import com.baxolino.apps.floats.core.encryption.AsymmetricEncryption.getKeyPair
import com.baxolino.apps.floats.core.encryption.AsymmetricEncryption.getPublicKey
import java.security.KeyPair
import java.security.PublicKey
import kotlin.concurrent.thread

/**
 * RSA (Public Private) Key pairs are generated by both the devices,
 * the RSA (Public) they share with each other, when the socket *initially*
 * was connected
 */
class SecureSocketConnection(private val connection: SocketConnection) {
  companion object {
    private const val TAG = "SecureSocketConnection"
  }

  private val keys: KeyPair = getKeyPair()

  // a public key sent by the other device
  private lateinit var encryptionKey: PublicKey

  init {
    exchangeKeys()
  }

  private fun exchangeKeys() {
    // send the RSA public key to the other device
    val public = keys.public
    Log.d(TAG, "Exchanging Public Key ${public.encoded.hashCode()}")

    connection.output.write(
      public.encoded
    )
    thread {
      Thread.sleep(50)
      val encryptionKeyBytes = ByteArray(KEY_SIZE_BITS)
      connection.input.read(encryptionKeyBytes)

      encryptionKey = getPublicKey(encryptionKeyBytes)
      Log.d(TAG, "Exchanged Public Key ${encryptionKey.encoded.hashCode()}")
    }
  }
}